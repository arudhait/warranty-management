// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warranty.Repository.Models;

#nullable disable

namespace Warranty.Repository.Migrations
{
    [DbContext(typeof(WarrantyManagementWebContext))]
    [Migration("20241009121214_warrantymanagementweb")]
    partial class warrantymanagementweb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Warranty.Repository.Models.ActionMast", b =>
                {
                    b.Property<short>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ACTION_ID");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ACTION_NAME");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ActionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "ActionName" }, "UC_ACTION_MAST")
                        .IsUnique();

                    b.ToTable("ACTION_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.BreakdownDet", b =>
                {
                    b.Property<long>("BreakdownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BREAKDOWN_ID");

                    b.Property<short>("ActionTaken")
                        .HasColumnType("smallint")
                        .HasColumnName("ACTION_TAKEN");

                    b.Property<DateTime>("CallRegDate")
                        .HasColumnType("date")
                        .HasColumnName("CALL_REG_DATE");

                    b.Property<short>("Conclusion")
                        .HasColumnType("smallint")
                        .HasColumnName("CONCLUSION");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("CrmNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CRM_NO");

                    b.Property<long>("CustId")
                        .HasColumnType("bigint")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime>("EnggFirstVisitDate")
                        .HasColumnType("date")
                        .HasColumnName("ENGG_FIRST_VISIT_DATE");

                    b.Property<int>("EnggId")
                        .HasColumnType("int")
                        .HasColumnName("ENGG_ID");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Problems")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("PROBLEMS");

                    b.Property<short>("ReqAction")
                        .HasColumnType("smallint")
                        .HasColumnName("REQ_ACTION");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TYPE_ID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("BreakdownId");

                    b.HasIndex("ActionTaken");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustId");

                    b.HasIndex("EnggId");

                    b.HasIndex("ReqAction");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BREAKDOWN_DET", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.BreakdownStatusMast", b =>
                {
                    b.Property<short>("BreakdownStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("BREAKDOWN_STATUS_ID");

                    b.Property<string>("BreakdownStatusName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BREAKDOWN_STATUS_NAME");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("BreakdownStatusId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BREAKDOWN_STATUS_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ContractDet", b =>
                {
                    b.Property<long>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CONTRACT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<decimal?>("AmtExcludTax")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("AMT_EXCLUD_TAX");

                    b.Property<string>("ChequeDet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CHEQUE_DET");

                    b.Property<short>("ContractTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("CONTRACT_TYPE_ID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("END_DATE");

                    b.Property<string>("Interval")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("INTERVAL");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("INVOICE_NO");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<short?>("NoOfService")
                        .HasColumnType("smallint")
                        .HasColumnName("NO_OF_SERVICE");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<int?>("TakenBy")
                        .HasColumnType("int")
                        .HasColumnName("TAKEN_BY");

                    b.Property<long>("WarrantyId")
                        .HasColumnType("bigint")
                        .HasColumnName("WARRANTY_ID");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TakenBy");

                    b.HasIndex("WarrantyId");

                    b.ToTable("CONTRACT_DET", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ContractTypeMast", b =>
                {
                    b.Property<short>("ContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("CONTRACT_TYPE_ID");

                    b.Property<string>("ContractTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CONTRACT_TYPE_NAME");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ContractTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "ContractTypeName" }, "UC_CONTRACT_TYPE_MAST")
                        .IsUnique();

                    b.ToTable("CONTRACT_TYPE_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.CustMast", b =>
                {
                    b.Property<long>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CUST_ID");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CITY");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Designation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DESIGNATION");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("DOCTOR_NAME");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("HOSPITAL_NAME");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MOBILE_NO");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PHONE_NO");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("PINCODE");

                    b.Property<string>("PndtCertiNo")
                        .IsRequired()
                        .HasMaxLength(27)
                        .IsUnicode(false)
                        .HasColumnType("varchar(27)")
                        .HasColumnName("PNDT_CERTI_NO");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)")
                        .HasColumnName("POSTAL_ADDRESS");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("date")
                        .HasColumnName("REG_DATE");

                    b.Property<short>("StateId")
                        .HasColumnType("smallint")
                        .HasColumnName("STATE_ID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("CustId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "DoctorName" }, "IX_CUST_MAST")
                        .IsUnique();

                    b.ToTable("CUST_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.Declaration", b =>
                {
                    b.Property<int>("DeclarationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Crmno")
                        .HasColumnType("int")
                        .HasColumnName("CRMNo");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MachineSn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MachineSN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PartSn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PartSN");

                    b.Property<string>("SignedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SparePartNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DeclarationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Declaration", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.DistrictMast", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DISTRICT_NAME");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("StateId")
                        .HasColumnType("smallint")
                        .HasColumnName("STATE_ID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("DistrictId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DISTRICT_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.EnggMast", b =>
                {
                    b.Property<int>("EnggId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ENGG_ID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("EnggName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("ENGG_NAME");

                    b.Property<string>("Ip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("EnggId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ENGG_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.InwardOutward", b =>
                {
                    b.Property<int>("InwardOutwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("CustId")
                        .HasColumnType("bigint")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsType")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SupplierMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("InwardOutwardId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustId");

                    b.HasIndex("SupplierMasterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InwardOutward", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.InwardOutwardItem", b =>
                {
                    b.Property<long>("InwardOutwardItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("InwardOutwardId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<short>("Qty")
                        .HasColumnType("smallint");

                    b.HasKey("InwardOutwardItemId");

                    b.HasIndex("InwardOutwardId");

                    b.HasIndex("ProductMasterId");

                    b.ToTable("InwardOutwardItem", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.Ledger", b =>
                {
                    b.Property<int>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<long>("InwardOutwardItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<short>("Qty")
                        .HasColumnType("smallint");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("LedgerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InwardOutwardItemId");

                    b.HasIndex("ProductMasterId");

                    b.ToTable("Ledger", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.LoginFailure", b =>
                {
                    b.Property<long>("LoginFailureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("LoginFailureId");

                    b.ToTable("LoginFailure", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.LoginHistory", b =>
                {
                    b.Property<int>("LoginHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IP");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LoggedOut")
                        .HasColumnType("datetime");

                    b.Property<int?>("LoggedOutBy")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserMasterId")
                        .HasColumnType("int");

                    b.HasKey("LoginHistoryId");

                    b.ToTable("LoginHistory", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.Menu", b =>
                {
                    b.Property<short>("MenuId")
                        .HasColumnType("smallint");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<bool>("HaveChild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MenuNameId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.MenuRole", b =>
                {
                    b.Property<short>("MenuRoleId")
                        .HasColumnType("smallint");

                    b.Property<short>("MenuId")
                        .HasColumnType("smallint");

                    b.Property<short>("UserTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("USER_TYPE_ID");

                    b.HasKey("MenuRoleId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("MenuRole", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ModelDet", b =>
                {
                    b.Property<long>("ModelDetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MODEL_DET_ID");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("MODEL_ID");

                    b.Property<string>("ModelSerialNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MODEL_SERIAL_NO");

                    b.Property<long>("WarrantyId")
                        .HasColumnType("bigint")
                        .HasColumnName("WARRANTY_ID");

                    b.HasKey("ModelDetId");

                    b.HasIndex("ModelId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("MODEL_DET", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ModelMast", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MODEL_ID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("ModelNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MODEL_NO");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ModelId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "ModelNo" }, "UC_MODEL_MAST")
                        .IsUnique();

                    b.ToTable("MODEL_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ProbDet", b =>
                {
                    b.Property<long>("ProbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PROB_ID");

                    b.Property<string>("ProbName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PROB_NAME");

                    b.Property<string>("ProbSerialNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PROB_SERIAL_NO");

                    b.Property<long>("WarrantyId")
                        .HasColumnType("bigint")
                        .HasColumnName("WARRANTY_ID");

                    b.HasKey("ProbId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("PROB_DET", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ProductMaster", b =>
                {
                    b.Property<int>("ProductMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CraetedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CRAETED_DATE");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Qty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.Property<short>("Warranty")
                        .HasColumnType("smallint");

                    b.HasKey("ProductMasterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProductMaster", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.StateMast", b =>
                {
                    b.Property<short>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("STATE_ID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATE_NAME");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("StateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "StateName" }, "UC_STATE_MAST")
                        .IsUnique();

                    b.ToTable("STATE_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.SupplierMaster", b =>
                {
                    b.Property<int>("SupplierMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductMatserId")
                        .HasColumnType("int");

                    b.Property<string>("ProductPrice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("StateId")
                        .HasColumnType("smallint");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SupplierSku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SupplierMasterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductMatserId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SupplierMaster", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.TerritoryAllocation", b =>
                {
                    b.Property<int>("AlloctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<int>("EnggId")
                        .HasColumnType("int")
                        .HasColumnName("ENGG_ID");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<short>("StateId")
                        .HasColumnType("smallint")
                        .HasColumnName("STATE_ID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("AlloctionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EnggId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TerritoryAllocation", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.UserMast", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("EnggId")
                        .HasColumnType("int")
                        .HasColumnName("ENGG_ID");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USER_NAME");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("USER_PASSWORD");

                    b.Property<short>("UserTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("USER_TYPE_ID");

                    b.HasKey("UserId");

                    b.HasIndex("EnggId");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "UserName" }, "UC_USER_MAST")
                        .IsUnique();

                    b.ToTable("USER_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.UserTypeMast", b =>
                {
                    b.Property<short>("UserTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("USER_TYPE_ID");

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USER_TYPE_NAME");

                    b.HasKey("UserTypeId");

                    b.ToTable("USER_TYPE_MAST", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.WarrantyDet", b =>
                {
                    b.Property<long>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("WARRANTY_ID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("CrmNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CRM_NO");

                    b.Property<long>("CustId")
                        .HasColumnType("bigint")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("END_DATE");

                    b.Property<int?>("InstalledBy")
                        .HasColumnType("int")
                        .HasColumnName("INSTALLED_BY");

                    b.Property<string>("Interval")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("INTERVAL");

                    b.Property<short?>("NoOfServices")
                        .HasColumnType("smallint")
                        .HasColumnName("NO_OF_SERVICES");

                    b.Property<DateTime>("SellingDate")
                        .HasColumnType("date")
                        .HasColumnName("SELLING_DATE");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("WarrantyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustId");

                    b.HasIndex("InstalledBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("WARRANTY_DET", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.WarrantyList", b =>
                {
                    b.Property<long>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("WARRANTY_ID");

                    b.Property<DateTime>("CraetedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CRAETED_DATE");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("CrmNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CRM_NO");

                    b.Property<long>("CustId")
                        .HasColumnType("bigint")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("END_DATE");

                    b.Property<int?>("InstalledBy")
                        .HasColumnType("int")
                        .HasColumnName("INSTALLED_BY");

                    b.Property<string>("Interval")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("INTERVAL");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<short?>("NoOfServices")
                        .HasColumnType("smallint")
                        .HasColumnName("NO_OF_SERVICES");

                    b.Property<DateTime?>("SellingDate")
                        .HasColumnType("date")
                        .HasColumnName("SELLING_DATE");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("WarrantyId")
                        .HasName("PK_Warranty");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustId");

                    b.HasIndex("InstalledBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Warranty_List", (string)null);
                });

            modelBuilder.Entity("Warranty.Repository.Models.ActionMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("ActionMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ACTION_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("ActionMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_ACTION_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.BreakdownDet", b =>
                {
                    b.HasOne("Warranty.Repository.Models.ActionMast", "ActionTakenNavigation")
                        .WithMany("BreakdownDetActionTakenNavigations")
                        .HasForeignKey("ActionTaken")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_DET_ACTION_MAST1");

                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("BreakdownDetCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_DET_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.CustMast", "Cust")
                        .WithMany("BreakdownDets")
                        .HasForeignKey("CustId")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_DET_CUST_MAST");

                    b.HasOne("Warranty.Repository.Models.EnggMast", "Engg")
                        .WithMany("BreakdownDets")
                        .HasForeignKey("EnggId")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_DET_ENGG_MAST");

                    b.HasOne("Warranty.Repository.Models.ActionMast", "ReqActionNavigation")
                        .WithMany("BreakdownDetReqActionNavigations")
                        .HasForeignKey("ReqAction")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_DET_ACTION_MAST");

                    b.HasOne("Warranty.Repository.Models.BreakdownStatusMast", "Type")
                        .WithMany("BreakdownDets")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_DET_BREAK_DOWN_MAST_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("BreakdownDetUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_BREAKDOWN_DET_USER_MAST1");

                    b.Navigation("ActionTakenNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Cust");

                    b.Navigation("Engg");

                    b.Navigation("ReqActionNavigation");

                    b.Navigation("Type");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.BreakdownStatusMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("BreakdownStatusMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_BREAKDOWN_STATUS_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("BreakdownStatusMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_BREAKDOWN_STATUS_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ContractDet", b =>
                {
                    b.HasOne("Warranty.Repository.Models.ContractTypeMast", "ContractType")
                        .WithMany("ContractDets")
                        .HasForeignKey("ContractTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CONTRACT_DET_CONTRACT_TYPE_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("ContractDets")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CONTRACT_DET_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.EnggMast", "TakenByNavigation")
                        .WithMany("ContractDets")
                        .HasForeignKey("TakenBy")
                        .HasConstraintName("FK_CONTRACT_DET_ENGG_MAST");

                    b.HasOne("Warranty.Repository.Models.WarrantyDet", "Warranty")
                        .WithMany("ContractDets")
                        .HasForeignKey("WarrantyId")
                        .IsRequired()
                        .HasConstraintName("FK_CONTRACT_DET_WARRANTY_DET");

                    b.Navigation("ContractType");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("TakenByNavigation");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ContractTypeMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("ContractTypeMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CONTRACT_TYPE_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("ContractTypeMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_CONTRACT_TYPE_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.CustMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("CustMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CUST_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.DistrictMast", "District")
                        .WithMany("CustMasts")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_CUST_MAST_DISTRICT_MAST");

                    b.HasOne("Warranty.Repository.Models.StateMast", "State")
                        .WithMany("CustMasts")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_CUST_MAST_STATE_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("CustMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_CUST_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("District");

                    b.Navigation("State");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.Declaration", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("DeclarationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Declaration_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("DeclarationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Declaration_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.DistrictMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("DistrictMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_DISTRICT_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.StateMast", "State")
                        .WithMany("DistrictMasts")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_DISTRICT_MAST_STATE_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("DistrictMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_DISTRICT_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("State");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.EnggMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("EnggMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ENGG_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("EnggMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_ENGG_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.InwardOutward", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("InwardOutwardCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_InwardOutward_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.CustMast", "Cust")
                        .WithMany("InwardOutwards")
                        .HasForeignKey("CustId")
                        .HasConstraintName("FK_InwardOutward_CUST_MAST");

                    b.HasOne("Warranty.Repository.Models.SupplierMaster", "SupplierMaster")
                        .WithMany("InwardOutwards")
                        .HasForeignKey("SupplierMasterId")
                        .HasConstraintName("FK_InwardOutward_SupplierMaster");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("InwardOutwardUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_InwardOutward_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Cust");

                    b.Navigation("SupplierMaster");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.InwardOutwardItem", b =>
                {
                    b.HasOne("Warranty.Repository.Models.InwardOutward", "InwardOutward")
                        .WithMany("InwardOutwardItems")
                        .HasForeignKey("InwardOutwardId")
                        .IsRequired()
                        .HasConstraintName("FK_InwardOutwardItem_InwardOutward");

                    b.HasOne("Warranty.Repository.Models.ProductMaster", "ProductMaster")
                        .WithMany("InwardOutwardItems")
                        .HasForeignKey("ProductMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_InwardOutwardItem_ProductMaster");

                    b.Navigation("InwardOutward");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("Warranty.Repository.Models.Ledger", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("Ledgers")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Ledger_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.InwardOutwardItem", "InwardOutwardItem")
                        .WithMany("Ledgers")
                        .HasForeignKey("InwardOutwardItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Ledger_InwardOutwardItem");

                    b.HasOne("Warranty.Repository.Models.ProductMaster", "ProductMaster")
                        .WithMany("Ledgers")
                        .HasForeignKey("ProductMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_Ledger_ProductMaster");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("InwardOutwardItem");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("Warranty.Repository.Models.MenuRole", b =>
                {
                    b.HasOne("Warranty.Repository.Models.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_MenuRole_Menu");

                    b.HasOne("Warranty.Repository.Models.UserTypeMast", "UserType")
                        .WithMany("MenuRoles")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MenuRole_USER_TYPE_MAST");

                    b.Navigation("Menu");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ModelDet", b =>
                {
                    b.HasOne("Warranty.Repository.Models.ModelMast", "Model")
                        .WithMany("ModelDets")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK_MODEL_DET_MODEL_MAST");

                    b.HasOne("Warranty.Repository.Models.WarrantyDet", "Warranty")
                        .WithMany("ModelDets")
                        .HasForeignKey("WarrantyId")
                        .IsRequired()
                        .HasConstraintName("FK_MODEL_DET_WARRANTY_DET");

                    b.Navigation("Model");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ModelMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("ModelMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_MODEL_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("ModelMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_MODEL_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ProbDet", b =>
                {
                    b.HasOne("Warranty.Repository.Models.WarrantyDet", "Warranty")
                        .WithMany("ProbDets")
                        .HasForeignKey("WarrantyId")
                        .IsRequired()
                        .HasConstraintName("FK_PROB_DET_WARRANTY_DET");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ProductMaster", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("ProductMasterCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ProductMaster_ProductMaster");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("ProductMasterUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_ProductMaster_USER_MAST");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.StateMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("StateMastCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_STATE_MAST_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("StateMastUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_STATE_MAST_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.SupplierMaster", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("SupplierMasterCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierMaster_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.ProductMaster", "ProductMatser")
                        .WithMany("SupplierMasters")
                        .HasForeignKey("ProductMatserId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierMaster_ProductMaster");

                    b.HasOne("Warranty.Repository.Models.StateMast", "State")
                        .WithMany("SupplierMasters")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierMaster_STATE_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("SupplierMasterUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_SupplierMaster_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ProductMatser");

                    b.Navigation("State");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.TerritoryAllocation", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("TerritoryAllocationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_TerritoryAllocation_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.DistrictMast", "District")
                        .WithMany("TerritoryAllocations")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK_TerritoryAllocation_DISTRICT_MAST");

                    b.HasOne("Warranty.Repository.Models.EnggMast", "Engg")
                        .WithMany("TerritoryAllocations")
                        .HasForeignKey("EnggId")
                        .IsRequired()
                        .HasConstraintName("FK_TerritoryAllocation_ENGG_MAST");

                    b.HasOne("Warranty.Repository.Models.StateMast", "State")
                        .WithMany("TerritoryAllocations")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_TerritoryAllocation_STATE_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("TerritoryAllocationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_TerritoryAllocation_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("District");

                    b.Navigation("Engg");

                    b.Navigation("State");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.UserMast", b =>
                {
                    b.HasOne("Warranty.Repository.Models.EnggMast", "Engg")
                        .WithMany("UserMasts")
                        .HasForeignKey("EnggId")
                        .HasConstraintName("FK_USER_MAST_ENGG_MAST");

                    b.HasOne("Warranty.Repository.Models.UserTypeMast", "UserType")
                        .WithMany("UserMasts")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_USER_MAST_USER_TYPE_MAST");

                    b.Navigation("Engg");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Warranty.Repository.Models.WarrantyDet", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("WarrantyDetCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_WARRANTY_DET_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.CustMast", "Cust")
                        .WithMany("WarrantyDets")
                        .HasForeignKey("CustId")
                        .IsRequired()
                        .HasConstraintName("FK_WARRANTY_DET_CUST_MAST");

                    b.HasOne("Warranty.Repository.Models.EnggMast", "InstalledByNavigation")
                        .WithMany("WarrantyDets")
                        .HasForeignKey("InstalledBy")
                        .HasConstraintName("FK_WARRANTY_DET_ENGG_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("WarrantyDetUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_WARRANTY_DET_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Cust");

                    b.Navigation("InstalledByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.WarrantyList", b =>
                {
                    b.HasOne("Warranty.Repository.Models.UserMast", "CreatedByNavigation")
                        .WithMany("WarrantyListCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Warranty_USER_MAST");

                    b.HasOne("Warranty.Repository.Models.CustMast", "Cust")
                        .WithMany("WarrantyLists")
                        .HasForeignKey("CustId")
                        .IsRequired()
                        .HasConstraintName("FK_Warranty_List_CUST_MAST");

                    b.HasOne("Warranty.Repository.Models.EnggMast", "InstalledByNavigation")
                        .WithMany("WarrantyLists")
                        .HasForeignKey("InstalledBy")
                        .HasConstraintName("FK_Warranty_List_ENGG_MAST");

                    b.HasOne("Warranty.Repository.Models.UserMast", "UpdatedByNavigation")
                        .WithMany("WarrantyListUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Warranty_USER_MAST1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Cust");

                    b.Navigation("InstalledByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ActionMast", b =>
                {
                    b.Navigation("BreakdownDetActionTakenNavigations");

                    b.Navigation("BreakdownDetReqActionNavigations");
                });

            modelBuilder.Entity("Warranty.Repository.Models.BreakdownStatusMast", b =>
                {
                    b.Navigation("BreakdownDets");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ContractTypeMast", b =>
                {
                    b.Navigation("ContractDets");
                });

            modelBuilder.Entity("Warranty.Repository.Models.CustMast", b =>
                {
                    b.Navigation("BreakdownDets");

                    b.Navigation("InwardOutwards");

                    b.Navigation("WarrantyDets");

                    b.Navigation("WarrantyLists");
                });

            modelBuilder.Entity("Warranty.Repository.Models.DistrictMast", b =>
                {
                    b.Navigation("CustMasts");

                    b.Navigation("TerritoryAllocations");
                });

            modelBuilder.Entity("Warranty.Repository.Models.EnggMast", b =>
                {
                    b.Navigation("BreakdownDets");

                    b.Navigation("ContractDets");

                    b.Navigation("TerritoryAllocations");

                    b.Navigation("UserMasts");

                    b.Navigation("WarrantyDets");

                    b.Navigation("WarrantyLists");
                });

            modelBuilder.Entity("Warranty.Repository.Models.InwardOutward", b =>
                {
                    b.Navigation("InwardOutwardItems");
                });

            modelBuilder.Entity("Warranty.Repository.Models.InwardOutwardItem", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("Warranty.Repository.Models.Menu", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ModelMast", b =>
                {
                    b.Navigation("ModelDets");
                });

            modelBuilder.Entity("Warranty.Repository.Models.ProductMaster", b =>
                {
                    b.Navigation("InwardOutwardItems");

                    b.Navigation("Ledgers");

                    b.Navigation("SupplierMasters");
                });

            modelBuilder.Entity("Warranty.Repository.Models.StateMast", b =>
                {
                    b.Navigation("CustMasts");

                    b.Navigation("DistrictMasts");

                    b.Navigation("SupplierMasters");

                    b.Navigation("TerritoryAllocations");
                });

            modelBuilder.Entity("Warranty.Repository.Models.SupplierMaster", b =>
                {
                    b.Navigation("InwardOutwards");
                });

            modelBuilder.Entity("Warranty.Repository.Models.UserMast", b =>
                {
                    b.Navigation("ActionMastCreatedByNavigations");

                    b.Navigation("ActionMastUpdatedByNavigations");

                    b.Navigation("BreakdownDetCreatedByNavigations");

                    b.Navigation("BreakdownDetUpdatedByNavigations");

                    b.Navigation("BreakdownStatusMastCreatedByNavigations");

                    b.Navigation("BreakdownStatusMastUpdatedByNavigations");

                    b.Navigation("ContractDets");

                    b.Navigation("ContractTypeMastCreatedByNavigations");

                    b.Navigation("ContractTypeMastUpdatedByNavigations");

                    b.Navigation("CustMastCreatedByNavigations");

                    b.Navigation("CustMastUpdatedByNavigations");

                    b.Navigation("DeclarationCreatedByNavigations");

                    b.Navigation("DeclarationUpdatedByNavigations");

                    b.Navigation("DistrictMastCreatedByNavigations");

                    b.Navigation("DistrictMastUpdatedByNavigations");

                    b.Navigation("EnggMastCreatedByNavigations");

                    b.Navigation("EnggMastUpdatedByNavigations");

                    b.Navigation("InwardOutwardCreatedByNavigations");

                    b.Navigation("InwardOutwardUpdatedByNavigations");

                    b.Navigation("Ledgers");

                    b.Navigation("ModelMastCreatedByNavigations");

                    b.Navigation("ModelMastUpdatedByNavigations");

                    b.Navigation("ProductMasterCreatedByNavigations");

                    b.Navigation("ProductMasterUpdatedByNavigations");

                    b.Navigation("StateMastCreatedByNavigations");

                    b.Navigation("StateMastUpdatedByNavigations");

                    b.Navigation("SupplierMasterCreatedByNavigations");

                    b.Navigation("SupplierMasterUpdatedByNavigations");

                    b.Navigation("TerritoryAllocationCreatedByNavigations");

                    b.Navigation("TerritoryAllocationUpdatedByNavigations");

                    b.Navigation("WarrantyDetCreatedByNavigations");

                    b.Navigation("WarrantyDetUpdatedByNavigations");

                    b.Navigation("WarrantyListCreatedByNavigations");

                    b.Navigation("WarrantyListUpdatedByNavigations");
                });

            modelBuilder.Entity("Warranty.Repository.Models.UserTypeMast", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("UserMasts");
                });

            modelBuilder.Entity("Warranty.Repository.Models.WarrantyDet", b =>
                {
                    b.Navigation("ContractDets");

                    b.Navigation("ModelDets");

                    b.Navigation("ProbDets");
                });
#pragma warning restore 612, 618
        }
    }
}
